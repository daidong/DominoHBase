// Autogenerated Jamon implementation
// /Users/daidong/Documents/workspace/Vanth/hbase-core-trunk/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/master/MasterStatusTmpl.jamon

package org.apache.hadoop.hbase.tmpl.master;

// 33, 1
import java.util.*;
// 34, 1
import org.apache.hadoop.util.StringUtils;
// 35, 1
import org.apache.hadoop.hbase.util.Bytes;
// 36, 1
import org.apache.hadoop.hbase.util.JvmVersion;
// 37, 1
import org.apache.hadoop.hbase.util.FSUtils;
// 38, 1
import org.apache.hadoop.hbase.master.HMaster;
// 39, 1
import org.apache.hadoop.hbase.HConstants;
// 40, 1
import org.apache.hadoop.hbase.ServerLoad;
// 41, 1
import org.apache.hadoop.hbase.ServerName;
// 42, 1
import org.apache.hadoop.hbase.client.HBaseAdmin;
// 43, 1
import org.apache.hadoop.hbase.client.HConnectionManager;
// 44, 1
import org.apache.hadoop.hbase.HTableDescriptor;
// 45, 1
import org.apache.hadoop.hbase.HBaseConfiguration;

public class MasterStatusTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.Intf

{
  private final HMaster master;
  private final HBaseAdmin admin;
  private final String format;
  private final ServerName rootLocation;
  private final Map<String,Integer> frags;
  private final String filter;
  private final Set<ServerName> deadServers;
  private final ServerName metaLocation;
  private final boolean catalogJanitorEnabled;
  private final boolean showAppendWarning;
  private final List<ServerName> servers;
  protected static org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData p_implData)
  {
    if(! p_implData.getFormat__IsNotDefault())
    {
      p_implData.setFormat("html");
    }
    if(! p_implData.getRootLocation__IsNotDefault())
    {
      p_implData.setRootLocation(null);
    }
    if(! p_implData.getFrags__IsNotDefault())
    {
      p_implData.setFrags(null);
    }
    if(! p_implData.getFilter__IsNotDefault())
    {
      p_implData.setFilter("general");
    }
    if(! p_implData.getDeadServers__IsNotDefault())
    {
      p_implData.setDeadServers(null);
    }
    if(! p_implData.getMetaLocation__IsNotDefault())
    {
      p_implData.setMetaLocation(null);
    }
    if(! p_implData.getCatalogJanitorEnabled__IsNotDefault())
    {
      p_implData.setCatalogJanitorEnabled(true);
    }
    if(! p_implData.getShowAppendWarning__IsNotDefault())
    {
      p_implData.setShowAppendWarning(false);
    }
    if(! p_implData.getServers__IsNotDefault())
    {
      p_implData.setServers(null);
    }
    return p_implData;
  }
  public MasterStatusTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.master.MasterStatusTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    master = p_implData.getMaster();
    admin = p_implData.getAdmin();
    format = p_implData.getFormat();
    rootLocation = p_implData.getRootLocation();
    frags = p_implData.getFrags();
    filter = p_implData.getFilter();
    deadServers = p_implData.getDeadServers();
    metaLocation = p_implData.getMetaLocation();
    catalogJanitorEnabled = p_implData.getCatalogJanitorEnabled();
    showAppendWarning = p_implData.getShowAppendWarning();
    servers = p_implData.getServers();
  }
  
  public void renderNoFlush(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 47, 1
    if (format.equals("json") )
    {
      // 47, 30
      jamonWriter.write("\n  ");
      // 48, 3
      {
        org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl __jamon__var_0 = new org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl(this.getTemplateManager());
        __jamon__var_0.setFilter(filter);
        __jamon__var_0.setFormat("json" );
        __jamon__var_0.renderNoFlush(jamonWriter);
      }
      // 48, 68
      jamonWriter.write("\n  ");
      // 49, 3
      return; 
    }
    // 50, 7
    jamonWriter.write("\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Master: ");
    // 55, 20
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName().getHostname()), jamonWriter);
    // 55, 62
    jamonWriter.write("</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"\">\n    <link href=\"/static/css/bootstrap.css\" rel=\"stylesheet\">\n    <link href=\"/static/css/bootstrap-responsive.css\" rel=\"stylesheet\">\n    <link href=\"/static/css/hbase.css\" rel=\"stylesheet\">\n    <!--[if lt IE 9]>\n      <script src=\"/static/js/html5shiv.js\"></script>\n    <![endif]-->\n  </head>\n\n  <body>\n\n    <div class=\"navbar navbar-fixed-top\">\n      <div class=\"navbar-inner\">\n        <div class=\"container\">\n          <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\">\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </a>\n          <a class=\"brand\" href=\"/master-status\"><img src=\"/static/hbase_logo_small.png\" alt=\"HBase Logo\"/></a>\n          <div class=\"nav-collapse\">\n            <ul class=\"nav\">\n                <li class=\"active\"><a href=\"/\">Home</a></li>\n                <li><a href=\"/tablesDetailed.jsp\">Table Details</a></li>\n                <li><a href=\"/logs/\">Local logs</a></li>\n                <li><a href=\"/logLevel\">Log Level</a></li>\n                <li><a href=\"/dump\">Debug dump</a></li>\n                <li><a href=\"/jmx\">Metrics Dump</a></li>\n                ");
    // 85, 17
    if (HBaseConfiguration.isShowConfInServlet())
    {
      // 85, 64
      jamonWriter.write("\n                <li><a href=\"/conf\">HBase Configuration</a></li>\n                ");
    }
    // 87, 23
    jamonWriter.write("\n            </ul>\n          </div><!--/.nav-collapse -->\n        </div>\n      </div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"row inner_header\">\n            <div class=\"page-header\">\n                <h1>Master <small>");
    // 97, 35
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getServerName().getHostname()), jamonWriter);
    // 97, 77
    jamonWriter.write(" </small></h1>\n            </div>\n        </div>\n\n        <div class=\"row\">\n        <!-- Various warnings that cluster admins should be aware of -->\n        ");
    // 103, 9
    if (JvmVersion.isBadJvmVersion() )
    {
      // 103, 45
      jamonWriter.write("\n          <div class=\"alert alert-error\">\n          Your current JVM version ");
      // 105, 36
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(System.getProperty("java.version")), jamonWriter);
      // 105, 76
      jamonWriter.write(" is known to be\n          unstable with HBase. Please see the\n          <a href=\"http://wiki.apache.org/hadoop/Hbase/Troubleshooting#A18\">HBase wiki</a>\n          for details.\n          </div>\n        ");
    }
    // 110, 15
    jamonWriter.write("\n        ");
    // 111, 9
    if (showAppendWarning )
    {
      // 111, 34
      jamonWriter.write("\n          <div class=\"alert alert-error\">\n          You are currently running the HMaster without HDFS append support enabled.\n          This may result in data loss.\n          Please see the <a href=\"http://wiki.apache.org/hadoop/Hbase/HdfsSyncSupport\">HBase wiki</a>\n          for details.\n          </div>\n        ");
    }
    // 118, 15
    jamonWriter.write("\n        ");
    // 119, 9
    if (master.isInitialized() && !catalogJanitorEnabled )
    {
      // 119, 65
      jamonWriter.write("\n          <div class=\"alert alert-error\">\n          Please note that your cluster is running with the CatalogJanitor disabled. It can be\n          re-enabled from the hbase shell by running the command 'catalogjanitor_switch true'\n          </div>\n        ");
    }
    // 124, 15
    jamonWriter.write("\n\n        <section>\n            <h2>Region Servers</h2>\n            ");
    // 128, 13
    {
      org.apache.hadoop.hbase.tmpl.master.RegionServerListTmpl __jamon__var_1 = new org.apache.hadoop.hbase.tmpl.master.RegionServerListTmpl(this.getTemplateManager());
      __jamon__var_1.setServers(servers );
      __jamon__var_1.renderNoFlush(jamonWriter, master);
    }
    // 128, 74
    jamonWriter.write("\n\n            ");
    // 130, 13
    if ((deadServers != null) )
    {
      // 130, 42
      jamonWriter.write("\n                ");
      // 131, 17
      {
        // 131, 17
        __jamon_innerUnit__deadRegionServers(jamonWriter);
      }
      // 131, 40
      jamonWriter.write("\n            ");
    }
    // 132, 19
    jamonWriter.write("\n        </section>\n\n        <section>\n            <h2>Backup Masters</h2>\n            ");
    // 137, 13
    {
      org.apache.hadoop.hbase.tmpl.master.BackupMasterListTmpl __jamon__var_2 = new org.apache.hadoop.hbase.tmpl.master.BackupMasterListTmpl(this.getTemplateManager());
      __jamon__var_2.renderNoFlush(jamonWriter, master );
    }
    // 137, 56
    jamonWriter.write("\n        </section>\n\n        <section>\n            <h2>Tables</h2>\n            <div class=\"tabbable\">\n                <ul class=\"nav nav-pills\">\n                    <li class=\"active\">\n                        <a href=\"#tab_userTables\" data-toggle=\"tab\">User Tables</a>\n                    </li>\n                    <li class=\"\">\n                        <a href=\"#tab_catalogTables\" data-toggle=\"tab\">Catalog Tables</a>\n                    </li>\n                </ul>\n                <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\n                    <div class=\"tab-pane active\" id=\"tab_userTables\">\n                        ");
    // 153, 25
    if ((metaLocation != null) )
    {
      // 153, 55
      jamonWriter.write("\n                            ");
      // 154, 29
      {
        // 154, 29
        __jamon_innerUnit__userTables(jamonWriter);
      }
      // 154, 45
      jamonWriter.write("\n                        ");
    }
    // 155, 31
    jamonWriter.write("\n                    </div>\n                    <div class=\"tab-pane\" id=\"tab_catalogTables\">\n                        ");
    // 158, 25
    if ((rootLocation != null) )
    {
      // 158, 55
      jamonWriter.write("\n                            ");
      // 159, 29
      {
        // 159, 29
        __jamon_innerUnit__catalogTables(jamonWriter);
      }
      // 159, 48
      jamonWriter.write("\n                        ");
    }
    // 160, 31
    jamonWriter.write("\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        ");
    // 166, 9
    {
      org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl __jamon__var_3 = new org.apache.hadoop.hbase.tmpl.master.AssignmentManagerStatusTmpl(this.getTemplateManager());
      __jamon__var_3.renderNoFlush(jamonWriter, master.getAssignmentManager());
    }
    // 166, 90
    jamonWriter.write("\n\n        <section>\n            ");
    // 169, 13
    {
      org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl __jamon__var_4 = new org.apache.hadoop.hbase.tmpl.common.TaskMonitorTmpl(this.getTemplateManager());
      __jamon__var_4.setFilter(filter );
      __jamon__var_4.renderNoFlush(jamonWriter);
    }
    // 169, 61
    jamonWriter.write("\n        </section>\n\n        <section>\n            <h2>Software Attributes</h2>\n            <table id=\"attributes_table\" class=\"table table-striped\">\n                <tr>\n                    <th>Attribute Name</th>\n                    <th>Value</th>\n                    <th>Description</th>\n                </tr>\n                <tr>\n                    <td>HBase Version</td>\n                    <td>");
    // 182, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getVersion()), jamonWriter);
    // 182, 84
    jamonWriter.write(", r");
    // 182, 87
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getRevision()), jamonWriter);
    // 182, 147
    jamonWriter.write("</td><td>HBase version and revision</td>\n                </tr>\n                <tr>\n                    <td>HBase Compiled</td>\n                    <td>");
    // 186, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getDate()), jamonWriter);
    // 186, 81
    jamonWriter.write(", ");
    // 186, 83
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.hbase.util.VersionInfo.getUser()), jamonWriter);
    // 186, 139
    jamonWriter.write("</td>\n                    <td>When HBase version was compiled and by whom</td>\n                </tr>\n                <tr>\n                    <td>Hadoop Version</td>\n                    <td>");
    // 191, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getVersion()), jamonWriter);
    // 191, 78
    jamonWriter.write(", r");
    // 191, 81
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getRevision()), jamonWriter);
    // 191, 135
    jamonWriter.write("</td>\n                    <td>Hadoop version and revision</td>\n                </tr>\n                <tr>\n                    <td>Hadoop Compiled</td>\n                    <td>");
    // 196, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getDate()), jamonWriter);
    // 196, 75
    jamonWriter.write(", ");
    // 196, 77
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(org.apache.hadoop.util.VersionInfo.getUser()), jamonWriter);
    // 196, 127
    jamonWriter.write("</td>\n                    <td>When Hadoop version was compiled and by whom</td>\n                </tr>\n                <tr>\n                    <td>HBase Root Directory</td>\n                    <td>");
    // 201, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(FSUtils.getRootDir(master.getConfiguration()).toString()), jamonWriter);
    // 201, 87
    jamonWriter.write("</td>\n                    <td>Location of HBase home directory</td>\n                </tr>\n                <tr>\n                    <td>HBase Cluster ID</td>\n                    <td>");
    // 206, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getClusterId() != null ? master.getClusterId() : "Not set"), jamonWriter);
    // 206, 96
    jamonWriter.write("</td>\n                    <td>Unique identifier generated for each HBase cluster</td>\n                </tr>\n                <tr>\n                    <td>Load average</td>\n                    <td>");
    // 211, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(StringUtils.limitDecimalTo2(master.getServerManager().getAverageLoad())), jamonWriter);
    // 211, 102
    jamonWriter.write("</td>\n                    <td>Average number of regions per regionserver. Naive computation.</td>\n                </tr>\n                ");
    // 214, 17
    if (frags != null )
    {
      // 214, 38
      jamonWriter.write("\n                <tr>\n                    <td>Fragmentation</td>\n                    <td>");
      // 217, 25
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get("-TOTAL-") != null ? frags.get("-TOTAL-").intValue() + "%" : "n/a"), jamonWriter);
      // 217, 107
      jamonWriter.write("</td>\n                    <td>Overall fragmentation of all tables, including .META. and -ROOT-.</td>\n                </tr>\n                ");
    }
    // 220, 23
    jamonWriter.write("\n                <tr>\n                    <td>Zookeeper Quorum</td>\n                    <td>");
    // 223, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(master.getZooKeeperWatcher().getQuorum()), jamonWriter);
    // 223, 71
    jamonWriter.write("</td>\n                    <td>Addresses of all registered ZK servers. For more, see <a href=\"/zk.jsp\">zk dump</a>.</td>\n                </tr>\n                <tr>\n                    <td>Coprocessors</td>\n                    <td>");
    // 228, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(java.util.Arrays.toString(master.getCoprocessors())), jamonWriter);
    // 228, 82
    jamonWriter.write("</td>\n                    <td>Coprocessors currently loaded by the master</td>\n                </tr>\n                <tr>\n                    <td>HMaster Start Time</td>\n                    <td>");
    // 233, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(new Date(master.getMasterStartTime())), jamonWriter);
    // 233, 68
    jamonWriter.write("</td>\n                    <td>Date stamp of when this HMaster was started</td>\n                </tr>\n                <tr>\n                    <td>HMaster Active Time</td>\n                    <td>");
    // 238, 25
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(new Date(master.getMasterActiveTime())), jamonWriter);
    // 238, 69
    jamonWriter.write("</td>\n                    <td>Date stamp of when this HMaster became active</td>\n                </tr>\n            </table>\n        </section>\n        </div>\n    </div> <!-- /container -->\n\n    <script src=\"/static/js/jquery.min.js\" type=\"text/javascript\"></script>\n    <script src=\"/static/js/bootstrap.min.js\" type=\"text/javascript\"></script>\n    <script src=\"/static/js/tab.js\" type=\"text/javascript\"></script>\n  </body>\n</html>\n\n\n");
  }
  
  
  // 253, 1
  private void __jamon_innerUnit__catalogTables(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 255, 1
    jamonWriter.write("<table class=\"table table-striped\">\n<tr>\n    <th>Table Name</th>\n    ");
    // 258, 5
    if ((frags != null) )
    {
      // 258, 28
      jamonWriter.write("\n        <th title=\"Fragmentation - Will be 0% after a major compaction and fluctuate during normal usage.\">Frag.</th>\n    ");
    }
    // 260, 11
    jamonWriter.write("\n    <th>Description</th>\n</tr>\n<tr>\n    <td><a href=\"table.jsp?name=");
    // 264, 33
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.ROOT_TABLE_NAME)), jamonWriter);
    // 264, 81
    jamonWriter.write("\">");
    // 264, 83
    org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.ROOT_TABLE_NAME)), jamonWriter);
    // 264, 131
    jamonWriter.write("</a></td>\n  ");
    // 265, 3
    if ((frags != null))
    {
      // 265, 25
      jamonWriter.write("\n        <td align=\"center\">");
      // 266, 28
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get("-ROOT-") != null ? frags.get("-ROOT-").intValue() + "%" : "n/a"), jamonWriter);
      // 266, 108
      jamonWriter.write("</td>\n  ");
    }
    // 267, 9
    jamonWriter.write("\n    <td>The -ROOT- table holds references to all .META. regions.</td>\n</tr>\n  ");
    // 270, 3
    if ((metaLocation != null) )
    {
      // 270, 33
      jamonWriter.write("\n<tr>\n    <td><a href=\"table.jsp?name=");
      // 272, 33
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.META_TABLE_NAME)), jamonWriter);
      // 272, 81
      jamonWriter.write("\">");
      // 272, 83
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toString(HConstants.META_TABLE_NAME)), jamonWriter);
      // 272, 131
      jamonWriter.write("</a></td>\n    ");
      // 273, 5
      if ((frags != null))
      {
        // 273, 27
        jamonWriter.write("\n        <td align=\"center\">");
        // 274, 28
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get(".META.") != null ? frags.get(".META.").intValue() + "%" : "n/a"), jamonWriter);
        // 274, 108
        jamonWriter.write("</td>\n    ");
      }
      // 275, 11
      jamonWriter.write("\n    <td>The .META. table holds references to all User Table regions</td>\n</tr>\n\n  ");
    }
    // 279, 9
    jamonWriter.write("\n</table>\n");
  }
  
  
  // 283, 1
  private void __jamon_innerUnit__userTables(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 284, 1
    
   HTableDescriptor[] tables = admin.listTables();
   HConnectionManager.deleteConnection(admin.getConfiguration(), false);

    // 288, 1
    if ((tables != null && tables.length > 0))
    {
      // 288, 45
      jamonWriter.write("\n<table class=\"table table-striped\">\n    <tr>\n        <th>Table Name</th>\n        ");
      // 292, 9
      if ((frags != null) )
      {
        // 292, 32
        jamonWriter.write("\n            <th title=\"Fragmentation - Will be 0% after a major compaction and fluctuate during normal usage.\">Frag.</th>\n        ");
      }
      // 294, 15
      jamonWriter.write("\n        <th>Description</th>\n    </tr>\n    ");
      // 297, 5
      for (HTableDescriptor htDesc : tables)
      {
        // 297, 45
        jamonWriter.write("\n    <tr>\n        <td><a href=table.jsp?name=");
        // 299, 36
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.getNameAsString()), jamonWriter);
        // 299, 66
        jamonWriter.write(">");
        // 299, 67
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.getNameAsString()), jamonWriter);
        // 299, 97
        jamonWriter.write("</a> </td>\n        ");
        // 300, 9
        if ((frags != null) )
        {
          // 300, 32
          jamonWriter.write("\n            <td align=\"center\">");
          // 301, 32
          org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(frags.get(htDesc.getNameAsString()) != null ? frags.get(htDesc.getNameAsString()).intValue() + "%" : "n/a"), jamonWriter);
          // 301, 144
          jamonWriter.write("</td>\n        ");
        }
        // 302, 15
        jamonWriter.write("\n        <td>");
        // 303, 13
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(htDesc.toStringCustomizedValues()), jamonWriter);
        // 303, 52
        jamonWriter.write("</td>\n    </tr>\n    ");
      }
      // 305, 12
      jamonWriter.write("\n    <p>");
      // 306, 8
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(tables.length), jamonWriter);
      // 306, 27
      jamonWriter.write(" table(s) in set. [<a href=tablesDetailed.jsp>Details</a>]</p>\n</table>\n");
    }
    // 308, 7
    jamonWriter.write("\n");
  }
  
  
  // 313, 1
  private void __jamon_innerUnit__deadRegionServers(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 315, 1
    if ((deadServers != null && deadServers.size() > 0))
    {
      // 315, 55
      jamonWriter.write("\n<h2>Dead Region Servers</h2>\n<table class=\"table table-striped\">\n    <tr>\n        <th rowspan=\"");
      // 319, 22
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(deadServers.size() + 1), jamonWriter);
      // 319, 49
      jamonWriter.write("\"></th>\n        <th>ServerName</th>\n    </tr>\n    ");
      // 322, 5
      
       ServerName [] deadServerNames = deadServers.toArray(new ServerName[deadServers.size()]);
         Arrays.sort(deadServerNames);
         for (ServerName deadServerName: deadServerNames) {
           int infoPort = master.getConfiguration().getInt("hbase.regionserver.info.port", 60030);
    
      // 328, 5
      jamonWriter.write("<tr>\n        <td>");
      // 329, 13
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(deadServerName), jamonWriter);
      // 329, 33
      jamonWriter.write("</td>\n    </tr>\n    ");
      // 331, 5
      
        }
    
      // 334, 5
      jamonWriter.write("<tr>\n        <th>Total: </th>\n        <td>servers: ");
      // 336, 22
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(deadServers.size()), jamonWriter);
      // 336, 46
      jamonWriter.write("</td>\n    </tr>\n</table>\n");
    }
    // 339, 7
    jamonWriter.write("\n");
  }
  
  
}
