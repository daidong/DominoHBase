// Autogenerated Jamon implementation
// /Users/daidong/Documents/workspace/Vanth/hbase-core-trunk/hbase-server/src/main/jamon/org/apache/hadoop/hbase/tmpl/regionserver/RegionListTmpl.jamon

package org.apache.hadoop.hbase.tmpl.regionserver;

// 24, 9
import java.util.*;
// 25, 9
import org.apache.hadoop.hbase.regionserver.HRegionServer;
// 26, 9
import org.apache.hadoop.hbase.util.Bytes;
// 27, 9
import org.apache.hadoop.hbase.HRegionInfo;
// 28, 9
import org.apache.hadoop.hbase.ServerName;
// 29, 9
import org.apache.hadoop.hbase.HBaseConfiguration;
// 30, 9
import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
// 31, 9
import org.apache.hadoop.hbase.protobuf.generated.AdminProtos.ServerInfo;
// 32, 9
import org.apache.hadoop.hbase.protobuf.generated.HBaseProtos.RegionLoad;

public class RegionListTmplImpl
  extends org.jamon.AbstractTemplateImpl
  implements org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.Intf

{
  private final HRegionServer regionServer;
  private final List<HRegionInfo> onlineRegions;
  protected static org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.ImplData __jamon_setOptionalArguments(org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.ImplData p_implData)
  {
    return p_implData;
  }
  public RegionListTmplImpl(org.jamon.TemplateManager p_templateManager, org.apache.hadoop.hbase.tmpl.regionserver.RegionListTmpl.ImplData p_implData)
  {
    super(p_templateManager, __jamon_setOptionalArguments(p_implData));
    regionServer = p_implData.getRegionServer();
    onlineRegions = p_implData.getOnlineRegions();
  }
  
  public void renderNoFlush(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter)
    throws java.io.IOException
  {
    // 34, 1
    if ((onlineRegions != null && onlineRegions.size() > 0) )
    {
      // 34, 60
      jamonWriter.write("\n\n    ");
      // 36, 5
      
        Collections.sort(onlineRegions);
    
      // 40, 5
      jamonWriter.write("<div class=\"tabbable\">\n        <ul class=\"nav nav-pills\">\n            <li class=\"active\"><a href=\"#tab_regionBaseInfo\" data-toggle=\"tab\">Base Info</a> </li>\n            <li><a href=\"#tab_regionRequestStats\" data-toggle=\"tab\">Request metrics</a></li>\n            <li class=\"\"><a href=\"#tab_regionStoreStats\" data-toggle=\"tab\">Storefile Metrics</a></li>\n            <li class=\"\"><a href=\"#tab_regionCompactStas\" data-toggle=\"tab\">Compaction Metrics</a></li>\n        </ul>\n        <div class=\"tab-content\" style=\"padding-bottom: 9px; border-bottom: 1px solid #ddd;\">\n            <div class=\"tab-pane active\" id=\"tab_regionBaseInfo\">\n                ");
      // 49, 17
      {
        // 49, 17
        __jamon_innerUnit__baseInfo(jamonWriter, onlineRegions);
      }
      // 49, 63
      jamonWriter.write("\n            </div>\n            <div class=\"tab-pane\" id=\"tab_regionRequestStats\">\n                ");
      // 52, 17
      {
        // 52, 17
        __jamon_innerUnit__requestStats(jamonWriter, onlineRegions);
      }
      // 52, 67
      jamonWriter.write("\n            </div>\n            <div class=\"tab-pane\" id=\"tab_regionStoreStats\">\n                ");
      // 55, 17
      {
        // 55, 17
        __jamon_innerUnit__storeStats(jamonWriter, onlineRegions);
      }
      // 55, 65
      jamonWriter.write("\n            </div>\n            <div class=\"tab-pane\" id=\"tab_regionCompactStas\">\n                ");
      // 58, 17
      {
        // 58, 17
        __jamon_innerUnit__compactStats(jamonWriter, onlineRegions);
      }
      // 58, 67
      jamonWriter.write("\n            </div>\n        </div>\n    </div>\n    <p>Region names are made of the containing table's name, a comma,\n    the start key, a comma, and a randomly generated region id.  To illustrate,\n    the region named\n    <em>domains,apache.org,5464829424211263407</em> is party to the table\n    <em>domains</em>, has an id of <em>5464829424211263407</em> and the first key\n    in the region is <em>apache.org</em>.  The <em>-ROOT-</em>\n    and <em>.META.</em> 'tables' are internal sytem tables (or 'catalog' tables in db-speak).\n    The -ROOT- keeps a list of all regions in the .META. table.  The .META. table\n    keeps a list of all regions in the system. The empty key is used to denote\n    table start and table end.  A region with an empty start key is the first region in a table.\n    If region has both an empty start and an empty end key, its the only region in the table.  See\n    <a href=\"http://hbase.org\">HBase Home</a> for further explication.<p>\n");
    }
    // 74, 1
    else
    {
      // 74, 8
      jamonWriter.write("\n    <p>Not serving regions</p>\n");
    }
    // 76, 7
    jamonWriter.write("\n\n");
  }
  
  
  // 99, 1
  private void __jamon_innerUnit__requestStats(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter, final List<HRegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 103, 5
    jamonWriter.write("<table class=\"table table-striped\">\n        <tr>\n            <th>Region Name</th>\n            <th>Read Request Count</th>\n            <th>Write Request Count</th>\n        </tr>\n\n        ");
    // 110, 9
    for (HRegionInfo r: onlineRegions )
    {
      // 110, 46
      jamonWriter.write("\n\n        <tr>\n        ");
      // 113, 9
      
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
        
      // 116, 13
      jamonWriter.write("<td>");
      // 116, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getRegionNameAsString()), jamonWriter);
      // 116, 48
      jamonWriter.write("</td>\n            ");
      // 117, 13
      if (load != null )
      {
        // 117, 33
        jamonWriter.write("\n            <td>");
        // 118, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getReadRequestsCount()), jamonWriter);
        // 118, 50
        jamonWriter.write("</td>\n            <td>");
        // 119, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getWriteRequestsCount()), jamonWriter);
        // 119, 51
        jamonWriter.write("</td>\n            ");
      }
      // 120, 19
      jamonWriter.write("\n        </tr>\n        ");
    }
    // 122, 16
    jamonWriter.write("\n    </table>\n");
  }
  
  
  // 163, 1
  private void __jamon_innerUnit__compactStats(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter, final List<HRegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 167, 5
    jamonWriter.write("<table class=\"table table-striped\">\n        <tr>\n            <th>Region Name</th>\n            <th>Num. Compacting KVs</th>\n            <th>Num. Compacted KVs</th>\n            <th>Compaction Progress</th>\n        </tr>\n\n        ");
    // 175, 9
    for (HRegionInfo r: onlineRegions )
    {
      // 175, 46
      jamonWriter.write("\n\n        <tr>\n        ");
      // 178, 9
      
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
            String percentDone = "";
            if  (load != null && load.getTotalCompactingKVs() > 0) {
            percentDone = String.format("%.2f", 100 *
            ((float) load.getCurrentCompactedKVs() / load.getTotalCompactingKVs())) + "%";
            }
        
      // 186, 13
      jamonWriter.write("<td>");
      // 186, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getRegionNameAsString()), jamonWriter);
      // 186, 48
      jamonWriter.write("</td>\n            ");
      // 187, 13
      if (load != null )
      {
        // 187, 33
        jamonWriter.write("\n            <td>");
        // 188, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getTotalCompactingKVs()), jamonWriter);
        // 188, 51
        jamonWriter.write("</td>\n            <td>");
        // 189, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getCurrentCompactedKVs()), jamonWriter);
        // 189, 52
        jamonWriter.write("</td>\n            <td>");
        // 190, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(percentDone), jamonWriter);
        // 190, 34
        jamonWriter.write("</td>\n            ");
      }
      // 191, 19
      jamonWriter.write("\n        </tr>\n        ");
    }
    // 193, 16
    jamonWriter.write("\n    </table>\n");
  }
  
  
  // 78, 1
  private void __jamon_innerUnit__baseInfo(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter, final List<HRegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 82, 5
    jamonWriter.write("<table class=\"table table-striped\">\n        <tr>\n            <th>Region Name</th>\n            <th>Start Key</th>\n            <th>End Key</th>\n        </tr>\n\n        ");
    // 89, 9
    for (HRegionInfo r: onlineRegions )
    {
      // 89, 46
      jamonWriter.write("\n        <tr>\n            <td>");
      // 91, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getRegionNameAsString()), jamonWriter);
      // 91, 48
      jamonWriter.write("</td>\n            <td>");
      // 92, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toStringBinary(r.getStartKey())), jamonWriter);
      // 92, 60
      jamonWriter.write("</td>\n            <td>");
      // 93, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(Bytes.toStringBinary(r.getEndKey())), jamonWriter);
      // 93, 58
      jamonWriter.write("</td>\n        </tr>\n        ");
    }
    // 95, 16
    jamonWriter.write("\n    </table>\n");
  }
  
  
  // 127, 1
  private void __jamon_innerUnit__storeStats(@SuppressWarnings({"unused","hiding"}) final java.io.Writer jamonWriter, final List<HRegionInfo> onlineRegions)
    throws java.io.IOException
  {
    // 131, 5
    jamonWriter.write("<table class=\"table table-striped\">\n        <tr>\n            <th>Region Name</th>\n            <th>Num. Stores</th>\n            <th>Num. Storefiles</th>\n            <th>Storefile Size Uncompressed</th>\n            <th>Storefile Size</th>\n            <th>Index Size</th>\n            <th>Bloom Size</th>\n        </tr>\n\n        ");
    // 142, 9
    for (HRegionInfo r: onlineRegions )
    {
      // 142, 46
      jamonWriter.write("\n\n        <tr>\n        ");
      // 145, 9
      
            RegionLoad load = regionServer.createRegionLoad(r.getEncodedName());
        
      // 148, 13
      jamonWriter.write("<td>");
      // 148, 17
      org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(r.getRegionNameAsString()), jamonWriter);
      // 148, 48
      jamonWriter.write("</td>\n            ");
      // 149, 13
      if (load != null )
      {
        // 149, 33
        jamonWriter.write("\n            <td>");
        // 150, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getStores()), jamonWriter);
        // 150, 39
        jamonWriter.write("</td>\n            <td>");
        // 151, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getStorefiles()), jamonWriter);
        // 151, 43
        jamonWriter.write("</td>\n            <td>");
        // 152, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getStoreUncompressedSizeMB()), jamonWriter);
        // 152, 56
        jamonWriter.write("MB</td>\n            <td>");
        // 153, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getStorefileSizeMB()), jamonWriter);
        // 153, 48
        jamonWriter.write("MB</td>\n            <td>");
        // 154, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getTotalStaticIndexSizeKB()), jamonWriter);
        // 154, 55
        jamonWriter.write("KB</td>\n            <td>");
        // 155, 17
        org.jamon.escaping.Escaping.HTML.write(org.jamon.emit.StandardEmitter.valueOf(load.getTotalStaticBloomSizeKB()), jamonWriter);
        // 155, 55
        jamonWriter.write("KB</td>\n            ");
      }
      // 156, 19
      jamonWriter.write("\n        </tr>\n        ");
    }
    // 158, 16
    jamonWriter.write("\n    </table>\n");
  }
  
  
}
