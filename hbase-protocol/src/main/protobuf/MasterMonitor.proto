/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// This file contains protocol buffers that are used for MasterMonitorProtocol.

option java_package = "org.apache.hadoop.hbase.protobuf.generated";
option java_outer_classname = "MasterMonitorProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

import "hbase.proto";
import "ClusterStatus.proto";

message GetSchemaAlterStatusRequest {
  required bytes tableName = 1;
}

message GetSchemaAlterStatusResponse {
  optional uint32 yetToUpdateRegions = 1;
  optional uint32 totalRegions = 2;
}

message GetTableDescriptorsRequest {
  repeated string tableNames = 1;
}

message GetTableDescriptorsResponse {
  repeated TableSchema tableSchema = 1;
}

message GetClusterStatusRequest {
}

message GetClusterStatusResponse {
  required ClusterStatus clusterStatus = 1;
}

service MasterMonitorService {
  /** Used by the client to get the number of regions that have received the updated schema */
  rpc getSchemaAlterStatus(GetSchemaAlterStatusRequest)
    returns(GetSchemaAlterStatusResponse);

  /** Get list of TableDescriptors for requested tables. */
  rpc getTableDescriptors(GetTableDescriptorsRequest)
    returns(GetTableDescriptorsResponse);

  /** Return cluster status. */
  rpc getClusterStatus(GetClusterStatusRequest)
    returns(GetClusterStatusResponse);
}
